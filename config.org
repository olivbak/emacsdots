#+TITLE: Emacs Configuration
#+AUTHOR: Oliver Bak
#+OPTIONS: num:nil
* Meta
** Package managers
Fetch external package managers to download packages from
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC
When fetched, update and initialize package managers
#+BEGIN_SRC emacs-lisp
  (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Custom
In the emacs config, expressions from /custom/ are injected into /init.el/. To avoid this, we have to specify a /custom.el/ file which /custom/ variables will be stored into instead.
This was inspired from: [stack-exchange](https://stackoverflow.com/questions/2548673/how-do-i-get-emacs-to-evaluate-a-file-when-a-frame-is-raised)
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

* General
** Get rid of ugly emacs logo
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Theme
This setting often changes, thus I will keep a list of my favorite themes for reference:
- Plan9
- Gruvbox
- Twilight
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes)
  (load-theme 'doom-badger t)
#+END_SRC
** Doom modeline
#+BEGIN_SRC emacs-lisp
;; Required by `doom-modeline` to display icons.
;; Run `M-x nerd-icons-install-fonts` to install the necessary fonts.
(use-package nerd-icons)

;; Mode line
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
;;(use-package ranger)
;;(ranger-override-dired-mode t)
#+END_SRC
** Autosave files in /tmp
This setting puts annoying emacs auto save files in /tmp
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+END_SRC
** Backup files
Backup files are move to ~/backup
#+BEGIN_SRC emacs-lisp
(add-to-list 'backup-directory-alist
             (cons ".*" "~/backup"))
#+END_SRC
** Replace yes/no prompt with y/n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Posframe
#+BEGIN_SRC emacs-lisp
  ;; (use-package posframe)
  ;; (use-package ivy-posframe)
  ;; (use-package which-key-posframe)
  ;; (use-package dired-posframe)
  ;; (use-package vertico-posframe)
  ;; (ivy-posframe-mode 1)
  ;; (dired-posframe-mode 1)
  ;; (which-key-posframe-mode 1)
  ;; (vertico-posframe-mode 1)
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))

  ;; (setq which-key-posframe-poshandler 'posframe-poshandler-window-center)

  ;; (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Apperance
This remove some annoying default features in emacs, such as top bars, tooltips etc.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)            ; Disable the menu bar
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)
  (set-face-attribute 'default nil :height 130)
#+END_SRC

** Sudoedit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC

** Perspective
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :demand t
  :bind (("C-c w f" . persp-switch)
         ("C-c w n" . persp-next)
         ("C-x k" . persp-kill-buffer*))
  :custom
  (persp-initial-frame-name "Main")
  :config
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))
#+END_SR
* Development
** Line numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(term-mode-hook
                      shell-mode-hook
                       vterm-mode-hook
                        treemacs-mode-hook
                         eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Set minimum width for line number display to 3 to avoid the gutter
  ;; changing size when scrolling past line 100.
  (setq-default display-line-numbers-width 3)
#+END_SRC
** Highlight current line
#+BEGIN_SRC elisp
(global-hl-line-mode 1)
#+END_SRC
** Which-key
/which-key/ displays a list of possible commands, when entering a prefix.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+END_SRC
** Dired
Dired lets you manage your Linux file system from Emacs. Includes:
- creation of files/folders
- deletion of files/folders
- visual file navigation
#+BEGIN_SRC emacs-lisp
(use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    ;;(evil-collection-define-key 'normal 'dired-mode-map
    ;;  "h" 'dired-single-up-directory
    ;;  "l" 'dired-single-buffer))
)

  (use-package dired-single)

  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
** Project
#+BEGIN_SRC emacs-lisp
  (use-package project
    :bind-keymap ("C-c p" . project-prefix-map))

  (use-package consult-project-extra)
  ;; Add magit to list of project commands
  (add-to-list 'project-switch-commands '(magit-project-status "Magit" ?m))
#+END_SRC
** Vertico
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

** Consult
#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("C-x b" . consult-buffer)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)                ;; orig. previous-matching-history-element
           ;; Project integration
           :map project-prefix-map
           ("C-c p r" . consult-ripgrep)
           ("C-c p b" . consult-project-buffer))

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )
  (define-key project-prefix-map (kbd "r") 'consult-ripgrep)
#+END_SRC

** Marginalia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+END_SRC
** Embark
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    ("C-c C-o" . embark-export))

  (use-package embark-consult)
#+END_SRC
** Direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
  :init
  (add-hook 'prog-mode-hook #'direnv-update-environment)
  :config
  (direnv-mode))
#+END_SRC
** Magit
Git integration in emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC
To fetch tags with force (i.e. overriding existing tags), we allow to fetch with the --force flag enabled:
#+BEGIN_SRC emacs-lisp
(transient-append-suffix 'magit-fetch "-t"
  '("-f" "Bypass safety checks" "--force"))
#+END_SRC
** Rainbow parantheses
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
:commands vterm
:config
(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
(setq vterm-max-scrollback 10000))
#+END_SRC

** Wgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep)
#+END_SRC

** Indentation
#+BEGIN_SRC elisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** On-save file hooks
#+BEGIN_SRC elisp
;; cleanup whitespace on save.
(add-hook 'before-save-hook 'whitespace-cleanup)
;; Automatically add a newline at the end of a file when a file is
;; saved. The POSIX standard defines a "line" as ending in a newline
;; character.
(setq require-final-newline t)
#+END_SRC

* Latex
This package requires Latex locally installed on your system
#+BEGIN_SRC emacs-lisp
(use-package tex
:ensure auctex)

(use-package pdf-tools)

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; revert pdf after compile
;; (setq TeX-view-program-selection '((output-pdf "zathura"))) ;; use pdf-tools for viewing
(setq LaTeX-command "latex --synctex=1") ;; optional: enable synctex

;; lstlisting in latex org export
;;(use-package ox-latex)
;;(setq org-latex-listings t)
#+END_SRC

* PlantUML
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
'org-babel-load-languages
'((plantuml . t))) ; this line activates plantuml

(setq org-plantuml-jar-path
    (expand-file-name "/home/vchg38/Downloads/plantuml-1.2023.4.jar"))

(use-package openwith
:init (openwith-mode))
(setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))

#+END_SRC

* Evil Mode
/evil-mode/ is a VI-emulation layer for Emacs. /evil-collection/ is a collection
of evil key-bindings for the most popular emacs modes, which are not covered by the default /evil-mode/.
#+BEGIN_SRC emacs-lisp
(use-package evil
:init
(setq evil-want-integration t)
(setq evil-want-keybinding nil)
(setq evil-want-C-u-scroll t)
(setq evil-want-C-i-jump nil)
:config
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
;; Use visual line motions even outside of visual-line-mode buffers
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
(evil-set-initial-state 'messages-buffer-mode 'normal)
(evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
:after evil
:config
(evil-collection-init))

;; Support searching with * and # from visual selection.
;; https://github.com/bling/evil-visualstar
(use-package evil-visualstar
  :after evil
  :config
  (global-evil-visualstar-mode))
#+END_SRC

* Programming Language Related
** Major Modes
*** Elixir
#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
:ensure t
:init
(add-hook 'elixir-mode-hook
        (lambda ()
            (push '(">=" . ?\u2265) prettify-symbols-alist)
            (push '("<=" . ?\u2264) prettify-symbols-alist)
            (push '("!=" . ?\u2260) prettify-symbols-alist)
            (push '("==" . ?\u2A75) prettify-symbols-alist)
            (push '("=~" . ?\u2245) prettify-symbols-alist)
            (push '("<-" . ?\u2190) prettify-symbols-alist)
            (push '("->" . ?\u2192) prettify-symbols-alist)
            (push '("<-" . ?\u2190) prettify-symbols-alist)
            (push '("|>" . ?\u25B7) prettify-symbols-alist))))
#+END_SRC
*** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC
*** C/C++
#+BEGIN_SRC emacs-lisp
(use-package cc-mode)
#+END_SRC
*** Elm
#+BEGIN_SRC emacs-lisp
(use-package elm-mode)
#+END_SRC

** LSP
Language server protol setup in Emacs
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :commands lsp
    :ensure t
    :diminish lsp-mode
    :hook
    (elixir-mode . lsp))

(add-hook 'haskell-mode-hook #'lsp)
(add-hook 'haskell-literate-mode-hook #'lsp)
#+END_SRC
*** Settings
#+BEGIN_SRC emacs-lisp
;(setq lsp-ui-doc-enable nil)
(setq lsp-lens-enable nil)
(setq lsp-headerline-breadcrumb-enable nil)
(setq lsp-ui-sideline-enable nil)
;(setq lsp-modeline-code-actions-enable nil)
;(setq lsp-modeline-diagnostics-enable nil)
(setq lsp-completion-provider :none)
;(setq lsp-diagnostics-provider :none)
#+END_SRC emacs-lisp

* Org mode
** General
#+BEGIN_SRC emacs-lisp
;; TODO: Mode this to another section
(setq-default fill-column 80)

;; Turn on indentation and auto-fill mode for Org files
(defun dw/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

(use-package org
    :defer t
    :hook (org-mode . dw/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2)

    (setq org-modules
    '(org-crypt
        org-habit
        org-bookmark
        org-eshell
        org-irc))

    (setq org-refile-targets '((nil :maxlevel . 1)
                                (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup))

(use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

(use-package org-superstar
:after org
:hook (org-mode . org-superstar-mode)
:custom
(org-superstar-remove-leading-stars t)
(org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

;; Replace list hyphen with dot
;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; Increase the size of various headings
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
(set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

;; Make sure org-indent face is available
(require 'org-indent)

;; Ensure that anything that should be fixed-pitch in Org files appears that way
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

;; Get rid of the background on column views
(set-face-attribute 'org-column nil :background nil)
(set-face-attribute 'org-column-title nil :background nil)
#+END_SRC
** Roam
#+BEGIN_SRC elisp
(use-package org-roam
:ensure t
:custom
(org-roam-directory (file-truename "~/.roam"))
:bind (("C-c n f"   . org-roam-node-find)
        ("C-c n d"   . org-roam-dailies-find-date)
        ("C-c n c"   . org-roam-dailies-capture-today)
        ("C-c n C r" . org-roam-dailies-capture-tomorrow)
        ("C-c n t"   . org-roam-dailies-find-today)
        ("C-c n y"   . org-roam-dailies-find-yesterday)
        ("C-c n r"   . org-roam-dailies-find-tomorrow)
        ("C-c n g"   . org-roam-graph)
        ("C-c n i" . org-roam-insert)
        ("C-c n I" . org-roam-insert-immediate))
:config
;; If you're using a vertical completion framework, you might want a more informative completion interface
(org-roam-db-autosync-mode))
#+END_SRC
** Deft
#+BEGIN_SRC elisp
(use-package deft
:commands (deft)
:config (setq deft-directory "~/.roam"
            deft-recursive t
            deft-extensions '("md" "org")))
#+END_SRC

* Keymaps
** Org agenda keymap
To make org-agenda more accesible, a keymap with commonly used commands have been made. Since org-agenda and org-mode used distinct commands for the same semantic functions, we provide a wrapper to call the right function for each mode
#+BEGIN_SRC emacs-lisp
(defun org-priority-wrapper ()
"Tries to call org-agenda-priority, followed by org-priority if former fails"
(interactive)
(condition-case e
    (org-agenda-priority)
    (error
    (org-priority))))

(defun org-schedule-wrapper ()
"Tries to call org-agenda-schedule, followed by org-schedule if former fails"
(interactive)
(condition-case e
    (org-agenda-schedule nil)
    (error
    (org-schedule nil))))

(defun org-deadline-wrapper ()
"Tries to call org-agenda-deadline, followed by org-deadline if former fails"
(interactive)
(condition-case e
    (org-agenda-deadline nil)
    (error
    (org-deadline nil))))

(defun org-set-property-wrapper ()
(interactive)
(condition-case e
    (org-agenda-set-property)
    (error
    (org-set-property))))

(defun org-add-note-wrapper ()
(interactive)
(condition-case e
    (org-agenda-add-note)
    (error
    (org-add-note))))

(defun org-set-effort-wrapper ()
(interactive)
(condition-case e
    (org-agenda-set-effort)
    (error
    (org-set-effort))))

(defun org-set-tags-wrapper ()
(interactive)
(condition-case e
    (org-agenda-set-tags)
    (error
    (org-set-tags-command))))

(defun org-set-property-wrapper ()
(interactive)
(condition-case e
    (org-agenda-set-propert)
    (error
    (org-set-property))))

#+END_SRC
These wrappers are now put into a /org-agenda/ keymap, bound to prefix /<C-c a>/
#+BEGIN_SRC emacs-lisp
(progn
(define-prefix-command 'agenda-keymap)
(define-key agenda-keymap (kbd "a") 'org-agenda)
(define-key agenda-keymap (kbd "d") 'org-deadline-wrapper)
(define-key agenda-keymap (kbd "s") 'org-schedule-wrapper)
(define-key agenda-keymap (kbd "n") 'org-add-note-wrapper)
(define-key agenda-keymap (kbd "e") 'org-set-effort-wrapper)
(define-key agenda-keymap (kbd "t") 'org-set-tags-wrapper)
(define-key agenda-keymap (kbd "o") 'org-toggle-ordered-property)
(define-key agenda-keymap (kbd "p") 'org-priority-wrapper)
(define-key agenda-keymap (kbd "l") 'org-set-property-wrapper)
(define-key agenda-keymap (kbd "c") 'org-insert-todo-heading)
(define-key agenda-keymap (kbd "v") 'org-insert-todo-subheading))

(global-set-key (kbd "C-c a") 'agenda-keymap)
#+END_SRC

* Hydras
