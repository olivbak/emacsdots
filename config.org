#+TITLE: Emacs Configuration
#+AUTHOR: Oliver Bak
#+OPTIONS: num:nil
* Meta
** Package managers
Fetch external package managers to download packages from
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			    ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))
#+END_SRC
When fetched, update and initialize package managers
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Custom
In the emacs config, expressions from /custom/ are injected into /init.el/. To avoid this, we have to specify a /custom.el/ file which /custom/ variables will be stored into instead.
This was inspired from: [stack-exchange](https://stackoverflow.com/questions/2548673/how-do-i-get-emacs-to-evaluate-a-file-when-a-frame-is-raised)
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC


* General
** Get rid of ugly emacs logo
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Theme
This setting often changes, thus I will keep a list of my favorite themes for reference:
- Plan9
- Gruvbox
- Twilight
#+BEGIN_SRC emacs-lisp
  (load-theme 'twilight t)
#+END_SRC
** Autosave files in /tmp
This setting puts annoying emacs auto save files in /tmp
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
#+END_SRC
** Backup files
Backup files are move to ~/backup
#+BEGIN_SRC emacs-lisp
(add-to-list 'backup-directory-alist
             (cons ".*" "~/backup"))
#+END_SRC
** Replace yes/no prompt with y/n
** Posframe
#+BEGIN_SRC emacs-lisp
  (require 'posframe)
  (require 'ivy-posframe)
  (require 'which-key-posframe)
  (require 'dired-posframe)
  (ivy-posframe-mode 1)
  (dired-posframe-mode 1)
  (which-key-posframe-mode 1)
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))

  (setq which-key-posframe-poshandler 'posframe-poshandler-window-center)

  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Apperance
This remove some annoying default features in emacs, such as top bars, tooltips etc.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)            ; Disable the menu bar
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)
  (set-face-attribute 'default nil :height 130)
#+END_SRC


* Development
** Line numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		    shell-mode-hook
		     vterm-mode-hook
		      treemacs-mode-hook
		       eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** Which-key
/which-key/ displays a list of possible commands, when entering a prefix.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+END_SRC
** Ivy
Completion frontend for emacs. TODO: no freaking clue what this does...
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+END_SRC
** Counsel
Yet again, no idea what this does. TODO
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
#+END_SRC
** Projectile
Godly /projectile/. Lets you manage projects, just press /"C-c p"/ you'll see.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/github")
      (setq projectile-project-search-path '("~/github")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+END_SRC
** Dired
Dired lets you manage your Linux file system from Emacs. Includes:
- creation of files/folders
- deletion of files/folders
- visual file navigation
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single)
#+END_SRC
** Direnv
** Magit
Git integration in emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC


** Rainbow parantheses
Nested parantheses have different colors, to easily distinguish between them.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Vterm
Felt cute, might delete later
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+END_SRC


* Latex
This package requires Latex locally installed on your system
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)

  (use-package pdf-tools)

  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer) ;; revert pdf after compile
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))) ;; use pdf-tools for viewing
  (setq LaTeX-command "latex --synctex=1") ;; optional: enable synctex
#+END_SRC


* Evil Mode
/evil-mode/ is a VI-emulation layer for Emacs. /evil-collection/ is a collection
of evil key-bindings for the most popular emacs modes, which are not covered by the default /evil-mode/.
#+BEGIN_SRC emacs-lisp
 (use-package evil
   :init
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   (setq evil-want-C-u-scroll t)
   (setq evil-want-C-i-jump nil)
   :config
   (evil-mode 1)
   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
   ;; Use visual line motions even outside of visual-line-mode buffers
   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
   (evil-set-initial-state 'messages-buffer-mode 'normal)
   (evil-set-initial-state 'dashboard-mode 'normal))

 (use-package evil-collection
   :after evil
   :config
   (evil-collection-init))
#+END_SRC


* Programming Language Related
** Major Modes
*** Elixir
*** Haskell
*** C/C++
** LSP
Language server protol setup in Emacs
#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
#+END_SRC
*** Settings
#+BEGIN_SRC emacs-lisp
;(setq lsp-ui-doc-enable nil)
(setq lsp-lens-enable nil)
(setq lsp-headerline-breadcrumb-enable nil)
(setq lsp-ui-sideline-enable nil)
;(setq lsp-modeline-code-actions-enable nil)
;(setq lsp-modeline-diagnostics-enable nil)
(setq lsp-completion-provider :none)
;(setq lsp-diagnostics-provider :none)
#+END_SRC emacs-lisp

* Org mode
** General
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-files (list "~/.agenda/"))
    (setq org-todo-keywords
	  '((sequence "TODO" "INPROGRESS" "BLOCKED" "DONE")))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-agenda-span 18
	  org-agenda-start-on-weekday nil
	  org-agenda-start-day "-7d")
    )
#+END_SRC
** Evil extension for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
To beautify /org-mode/ we evalute this expression
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    ;; Set default, fixed and variabel pitch fonts
    ;; Use M-x menu-set-font to view available fonts

  (defun beautify-orgmode ()
    (with-eval-after-load 'org-faces
      (let* ((variable-tuple
	      (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
		    ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
		    ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
		    ((x-list-fonts "Verdana")         '(:font "Verdana"))
		    ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
		    (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
	     (base-font-color     (face-foreground 'default nil 'default))
	     (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

	(custom-theme-set-faces
	 'user
	 `(org-level-8 ((t (,@headline ,@variable-tuple))))
	 `(org-level-7 ((t (,@headline ,@variable-tuple))))
	 `(org-level-6 ((t (,@headline ,@variable-tuple))))
	 `(org-level-5 ((t (,@headline ,@variable-tuple))))
	 `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
	 `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
	 `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
	 `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
	 `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))))

  (add-hook 'before-make-frame-hook
	    (lambda ()
	    (beautify-orgmode)))


  (add-hook 'org-mode-hook
	    '(lambda()
	       (if truncate-lines (toggle-truncate-lines -1))
	       ))

  (use-package org-autolist
    :hook (org-mode . org-autolist-mode))
  (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))

  (use-package org-fancy-priorities
    :ensure t
    :hook 
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list '("🔥" "🕖" "☕")))
#+END_SRC
** Agenda
Map /<F2>/ to open /find-file/ in the default agenda folder, which is set to ~/.agenda.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f2>")
		  (lambda ()
		    (interactive)
		    (counsel-find-file "~/.agenda")))
#+END_SRC
/org-agenda/ mode is used to manage todo-lists and other progress. To make
** Roam
Maps /<F1>/ to open /find-file/ in the default roam folder, ~/.roam
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f1>")
		  (lambda ()
		    (interactive)
		    (counsel-find-file "~/.roam")))
#+END_SRC 

* Email
** Credentials
#+BEGIN_SRC emacs-lisp
;email stuff
(setq user-mail-address "oliverbkp@gmail.com") 
(setq user-full-name "Oliver Bak")
#+END_SRC
** Settings
#+BEGIN_SRC emacs-lisp
  (require 'gnus)

  ;setup gmail nnimap
  (setq gnus-select-method
	'(nnimap "gmail"
		 (nnimap-address "imap.gmail.com")
		 (nnimap-server-port 993)
		 (nnimap-stream ssl)))

  ; Sort emails as i like em'
  (setq gnus-thread-sort-functions
	'(gnus-thread-sort-by-number
	  (not gnus-thread-sort-by-date)))


  (setq gnus-parameters
	'((".*" (large-newsgroup-initial . 20))))

  ; Send email via Gmail:
  (setq message-send-mail-function 'smtpmail-send-it
	smtpmail-default-smtp-server "smtp.gmail.com")

  ; Always show [Gmail]/Alle ; even when no unread mails
  (setq gnus-permanently-visible-groups ".*\\[Gmail\\]/Alle.*")
#+END_SRC
*** Add version2 newsleter to gnu
#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods '(nntp "news.gwene.org"))
#+END_SRC


* Keymaps
** Org agenda keymap
To make org-agenda more accesible, a keymap with commonly used commands have been made. Since org-agenda and org-mode used distinct commands for the same semantic functions, we provide a wrapper to call the right function for each mode
#+BEGIN_SRC emacs-lisp
  (defun org-priority-wrapper ()
    "Tries to call org-agenda-priority, followed by org-priority if former fails"
    (interactive)
    (condition-case e
	(org-agenda-priority)
      (error
       (org-priority))))

  (defun org-schedule-wrapper ()
    "Tries to call org-agenda-schedule, followed by org-schedule if former fails"
    (interactive)
    (condition-case e
	(org-agenda-schedule nil)
      (error
       (org-schedule nil))))

  (defun org-deadline-wrapper ()
    "Tries to call org-agenda-deadline, followed by org-deadline if former fails"
    (interactive)
    (condition-case e
	(org-agenda-deadline nil)
      (error
       (org-deadline nil))))

  (defun org-set-property-wrapper ()
    (interactive)
    (condition-case e
	(org-agenda-set-property)
      (error
       (org-set-property))))

  (defun org-add-note-wrapper ()
    (interactive)
    (condition-case e
	(org-agenda-add-note)
      (error
       (org-add-note))))

  (defun org-set-effort-wrapper ()
    (interactive)
    (condition-case e
	(org-agenda-set-effort)
      (error
       (org-set-effort))))

  (defun org-set-tags-wrapper ()
    (interactive)
    (condition-case e
	(org-agenda-set-tags)
      (error
       (org-set-tags-command))))

  (defun org-set-property-wrapper ()
    (interactive)
    (condition-case e
	(org-agenda-set-propert)
      (error
       (org-set-property))))

#+END_SRC
These wrappers are now put into a /org-agenda/ keymap, bound to prefix /<C-c a>/
#+BEGIN_SRC emacs-lisp
  (progn
    (define-prefix-command 'agenda-keymap)
    (define-key agenda-keymap (kbd "a") 'org-agenda)
    (define-key agenda-keymap (kbd "d") 'org-deadline-wrapper)
    (define-key agenda-keymap (kbd "s") 'org-schedule-wrapper)
    (define-key agenda-keymap (kbd "n") 'org-add-note-wrapper)
    (define-key agenda-keymap (kbd "e") 'org-set-effort-wrapper)
    (define-key agenda-keymap (kbd "t") 'org-set-tags-wrapper)
    (define-key agenda-keymap (kbd "o") 'org-toggle-ordered-property)
    (define-key agenda-keymap (kbd "p") 'org-priority-wrapper)
    (define-key agenda-keymap (kbd "l") 'org-set-property-wrapper)
    (define-key agenda-keymap (kbd "c") 'org-insert-todo-heading)
    (define-key agenda-keymap (kbd "v") 'org-insert-todo-subheading))

  (global-set-key (kbd "C-c a") 'agenda-keymap)
#+END_SRC


* Hydras
